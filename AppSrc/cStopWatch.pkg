//-------------------------------------------------------------------------------------------
//
// Class cStopWatch 
//   Mimics .Net System.Diagnostics.Stopwatch class  (with Micro-seconds precision) 
//   https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stopwatch?view=net-5.0
//
// Author : Samuel Pizarro
// Release: v 1.0
//   
// Change History
// Name            Date       Version   Description 
// --------------- ---------- --------- ----------------------------------------------------
// S. Pizarro      2021-08-09     v1.0  Created
//   
//-------------------------------------------------------------------------------------------

Use UI
Use Winkern.pkg 
Use GlobalDateTimeFunctions.pkg

// WinAPIs used:  QueryPerformanceCounter 
// https://docs.microsoft.com/en-us/windows/win32/sysinfo/acquiring-high-resolution-time-stamps
// putting class name in front of function to avoid future conflicts 
External_Function cStopWatch_QueryPerformanceFrequency  "QueryPerformanceFrequency" Kernel32.dll Address lpFrequency        Returns Boolean
External_Function cStopWatch_QueryPerformanceCounter    "QueryPerformanceCounter"   Kernel32.dll Address lpPerformanceCount Returns Boolean  

// gbi_cStopWatch_Frequency
//  This is used to cache the GPC Frequency (QueryPerformanceFrequency) which is a fixed value set at system boot. 
//  No need to keep quering it.. 
Global_Variable BigInt gbi_cStopWatch_Frequency 
Move 0 to gbi_cStopWatch_Frequency

Class cStopWatch is a cObject
    
    Procedure Construct_Object
        Forward Send Construct_Object
        
        { Visibility = Private } 
        Property BigInt priv.piFrequency 0 
        
        { Visibility = Private} 
        Property Boolean priv.pbHighRes 
        
        { Visibility = Private } 
        Property BigInt priv.pbiStartTick 
        
        { Visibility = Private } 
        Property Boolean priv.pbRunning False 
        
        {Visibility = Private} 
        Property BigInt priv.pbiElapsedTicks 0 

        Property Integer piErrorCode 0 
        
    End_Procedure

    Procedure End_Construct_Object
        BigInt biFreq
        Boolean bRet 
        Forward Send End_Construct_Object
        
        Move 0 to biFreq 
        If (gbi_cStopWatch_Frequency = 0) Begin 
            Move (cStopWatch_QueryPerformanceFrequency(AddressOf(biFreq))) to bRet 
            If (not(bRet)) Begin 
                Set priv.pbHighRes   to False 
                Set priv.piFrequency to 0 
            End
            Else Begin 
                Set priv.piFrequency to biFreq
                Move biFreq to gbi_cStopWatch_Frequency
                Set priv.pbHighRes   to True 
            End
        End
        Else Begin 
            Set priv.piFrequency to gbi_cStopWatch_Frequency
            Set priv.pbHighRes   to True  
        End
            
    End_Procedure
    
    { MethodType = Property } 
    Function IsHighResolution Returns Boolean 
        Function_Return (priv.pbHighRes(Self))
    End_Function
    
    // Frequency 
    //   If high-resolution available,  returns number ot ticks generated by second. 
    { MethodType = Property } 
    Function Frequency Returns BigInt
        Function_Return (priv.piFrequency(Self))
    End_Function

    
    { MethodType = Property } 
    Function IsRunning Returns Boolean 
        Function_Return (priv.pbRunning(Self))
    End_Function
    
    { MethodType = Method } 
    Function CurrentTickCounter Returns BigInt
        BigInt biCounter
        Boolean bRet bHighRes
        
        Get IsHighResolution to bHighRes
        If (bHighRes) Begin 
            Move 0 to biCounter 
            Move (cStopWatch_QueryPerformanceCounter(AddressOf(biCounter))) to bRet 
            If (not(bRet)) Begin 
                Move -1 to biCounter    
                Send UpdateLastError
            End

        End
        Else ; 
            Move (GetTickCount64()) to biCounter
        
        Function_Return biCounter
    End_Function

    { MethodType = Property } 
    Function ElapsedTicks Returns BigInt 
        Boolean bRunning
        BigInt biCount biStart
        
        Get priv.pbRunning to bRunning
        If (bRunning) Begin 
            Get CurrentTickCounter to biCount
            Get priv.pbiStartTick to biStart
            Move (biCount - biStart) to biCount
        End
        Else ; 
            Get priv.pbiElapsedTicks to biCount
            
        Function_Return biCount
    End_Function
    
    // ElapsedMilliSeconds
    //  Total elaped time expressed in milliseconds ( 1h = 60 * 60 * 1000  = 3.600.000 ms ) 
    Function ElapsedMilliSeconds Returns BigInt
         Boolean bHighRes
         BigInt biTicks biFreq
         
         Get IsHighResolution to bHighRes 
         Get ElapsedTicks to biTicks 
         If (not(bHighRes)) ;
            Function_Return biTicks 
         Else Begin 
            Get priv.piFrequency to biFreq
            Function_Return  (biTicks * 1000 / biFreq)
         End
    End_Function
    
    // ElapsedMicroSeconds
    //  Total elaped time expressed in micro-seconds ( 2 min  = 2 * 60 * 1000000  = 120.000.000 µs ) 
    Function ElapsedMicroSeconds Returns BigInt
         Boolean bHighRes
         BigInt biTicks biFreq
         
         Get IsHighResolution to bHighRes 
         Get ElapsedTicks to biTicks 
         If (not(bHighRes)) ;
            Function_Return 0
         Else Begin 
            Get priv.piFrequency to biFreq
            Function_Return  (biTicks * 1000000 / biFreq)
         End
    End_Function
    
    // Elapsed
    //  Total elapsed time expressed in timespan 
    Function Elapsed Returns TimeSpan
        TimeSpan tsElapsed 
        BigInt biEms biLim
        
        Move (2^31) to biLim 
        Get ElapsedMilliSeconds to biEms
        
        Repeat
            If (biEms > biLim) Begin 
                Move (biEms - bilim) to biEms 
                Move (SpanAddMillisecond(tsElapsed, Integer(biLim))) to tsElapsed 
            End
            Else ; 
                Move (SpanAddMillisecond(tsElapsed, Integer(biEms))) to tsElapsed 
            
        Until (biEms >= 0 ) 
        Function_Return tsElapsed
    End_Function
    
    { MethodType = Event } 
    Procedure OnError Integer iError 
    End_Procedure
    
    { Visibility = Private } 
    Procedure UpdateLastError 
        Integer iError
        
        Move (GetLastError()) to iError 
        Set piErrorCode to iError 
        
        Send OnError iError 
    End_Procedure

    { Visibility = Private } 
    Procedure UpdateElapsedTicks BigInt biStop 
        BigInt biStart biTicks 
        
        Get priv.pbiStartTick to biStart 
        Get priv.pbiElapsedTicks to biTicks 
        
        Set priv.pbiElapsedTicks to (biTicks + (biStop - biStart))
        
        // reset start, for next start
        Set priv.pbiStartTick to 0 
    End_Procedure

    { MethodType = Method } 
    Procedure Start 
        BigInt biCounter  
        Boolean bRunning 
        
        Get IsRunning to bRunning 
        If (not(bRunning)) Begin 
            Get CurrentTickCounter to biCounter
            
            If (biCounter = -1 ) Begin 
                Set priv.pbiStartTick to 0
                Set priv.pbRunning to False 
            End
            Else Begin 
                Set priv.pbiStartTick to biCounter 
                Set priv.pbRunning to True 
            End
        End
       
    End_Procedure
    
    
    // Stop
    //   Stop/Pause time interval measuremnt and update cumulative elapesed times 
    { MethodType = Method } 
    Procedure Stop 
        BigInt biCounter 
        Boolean bRunning 
        
        Get IsRunning to bRunning 
        If (bRunning) Begin 
            Get CurrentTickCounter to biCounter 
            If (biCounter <> -1) Begin 
                Set priv.pbRunning to False 
                Send UpdateElapsedTicks biCounter 
            End
        End
    End_Procedure
    
    // Reset 
    //   Stops time interval measurement and resets the cumulative elapsed time to zero.
    { MethodType = Method } 
    Procedure Reset   
        Set priv.pbiStartTick    to 0 
        Set priv.pbiElapsedTicks to 0 
        Set priv.pbRunning       to False 
    End_Procedure
    
    // Restart
    //   Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.
    //   Same as (Reset + start) 
    { MethodType = Method } 
    Procedure Restart 
        Send Reset 
        Send Start    
    End_Procedure

End_Class